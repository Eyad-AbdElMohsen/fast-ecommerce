# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Review {
  id: ID!
  rating: ReviewRating
  comment: String
  user: User!
  product: Product!
}

enum ReviewRating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

type Category {
  id: ID!
  name: String!
  description: String
  products: [Product!]
}

type Product {
  id: Int!
  title: String!
  price: Int!
  stock_quantity: Int!
  items: [CartItem!]
  reviews: [Review!]
  category: Category!
}

type CartItem {
  id: Int!
  cart: Cart!
  product: Product
  quantity: Int!
}

type Cart {
  id: Float!
  user: User!
  userId: Int!
  order: Order
  items: [CartItem!]
}

type Payment {
  id: ID!
  order: Order!
  user: User
  paymentMethod: PaymentMethod!
  status: PaymentStatus!
  amount: Float!
  paidAt: DateTime
}

enum PaymentMethod {
  CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Shipment {
  id: ID!
  order: Order
  orderId: Float
  carrier: ShipmentCarrierEnum!
  status: ShipmentStatus!
  shippedAt: DateTime
  deliveredAt: DateTime
}

enum ShipmentCarrierEnum {
  Bosta
  YallaGo
  Talabat
  Otlob
  Other
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

type Order {
  id: Int!
  user: User!
  cart: Cart!
  total_amount: Int!
  status: OrderStatusEnum!
  payment: Payment
  shipment: Shipment
}

enum OrderStatusEnum {
  PENDING
  PAID
  CANCELED
}

type User {
  id: Float!
  name: String!
  email: String!
  access_token: String
  role: UserRoleEnum!
  orders: [Order!]
  carts: [Cart!]
  reviews: [Review!]
  securityGroup: SecurityGroup
  securityGroupId: Float
  payments: [Payment!]
}

enum UserRoleEnum {
  USER
  ADMIN
  SUPER_ADMIN
}

type SecurityGroup {
  id: ID!
  groupName: String!
  permissions: [String!]!
  isActive: Boolean!
  users: [User!]
}

type GqlBooleanResponse {
  code: Int!
  success: Boolean!
  message: String
  data: Boolean!
}

type GqlStringsArrayResponse {
  code: Int!
  success: Boolean!
  message: String
  data: [String!]!
}

type GqlUserResponse {
  code: Int!
  success: Boolean!
  message: String
  data: User!
}

type GqlUsersArrayResponse {
  code: Int!
  success: Boolean!
  message: String
  data: [User!]!
}

type GqlSecurityGroupResponse {
  code: Int!
  success: Boolean!
  message: String
  data: SecurityGroup!
}

type GqlSecurityGroupsArrayResponse {
  code: Int!
  success: Boolean!
  message: String
  data: [SecurityGroup!]!
}

type Query {
  getHello: String!
  getSecurityGroups: GqlSecurityGroupsArrayResponse!
  getAllPermissions: GqlStringsArrayResponse!
  getUser(id: Float!): GqlUserResponse!
  getAllUsers: GqlUsersArrayResponse!
  getMe: GqlUserResponse!
  getAdmins: GqlUsersArrayResponse!
}

type Mutation {
  createSecurityGroup(input: CreateSecurityInput!): GqlSecurityGroupResponse!
  register(input: CreateUserInput!): GqlUserResponse!
  login(input: LoginInput!): GqlUserResponse!
  seedAdmin: GqlBooleanResponse!
  createAdmin(input: CreateAdminInput!): GqlUserResponse!
}

input CreateSecurityInput {
  groupName: String!
  permissions: [String!]!
  isActive: Boolean! = true
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateAdminInput {
  name: String!
  email: String!
  password: String!
  securityGroupId: Int!
  isActive: Boolean! = true
}